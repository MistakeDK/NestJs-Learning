import { Injectable, OnApplicationBootstrap } from '@nestjs/common';
import { Repository } from 'typeorm';
import { InjectRepository } from '@nestjs/typeorm';
import * as bcrypt from 'bcrypt';
import { Permission } from 'src/module/permission/entities/permission.entity';
import { Role } from 'src/module/role/entities/role.entity';
import { User } from 'src/module/users/entities/user.entity';
import { ePermission } from './permission.enum';

@Injectable()
export class InitService implements OnApplicationBootstrap {
  constructor(
    @InjectRepository(User) private userRepository: Repository<User>,
    @InjectRepository(Role) private roleRepository: Repository<Role>,
    @InjectRepository(Permission)
    private permissionRepository: Repository<Permission>,
  ) {}

  async onApplicationBootstrap() {
    console.log('üöÄ Ch·∫°y SeedService ƒë·ªÉ t·∫°o d·ªØ li·ªáu m·∫∑c ƒë·ªãnh...');
    await this.createDefaultUserAndRole();
  }

  private async createDefaultUserAndRole() {
    // 1Ô∏è‚É£ Ki·ªÉm tra xem role "Admin" ƒë√£ t·ªìn t·∫°i ch∆∞a
    let adminRole = await this.roleRepository.findOne({
      where: { name: 'Admin' },
      relations: ['permissions'],
    });

    if (!adminRole) {
      adminRole = this.roleRepository.create({ name: 'Admin' });
      await this.roleRepository.save(adminRole);
      console.log('‚úÖ Role Admin ƒë√£ ƒë∆∞·ª£c t·∫°o');
    }

    // 2Ô∏è‚É£ Ki·ªÉm tra v√† t·∫°o t·∫•t c·∫£ permission t·ª´ enum
    const existingPermissions = await this.permissionRepository.find();
    const allPermissions = Object.values(ePermission);

    if (existingPermissions.length < allPermissions.length) {
      const newPermissions = allPermissions
        .filter(
          (perm) => !existingPermissions.some((p) => p.permission === perm),
        )
        .map((perm) => {
          const newPermission = new Permission();
          newPermission.permission = perm as ePermission;
          newPermission.role = adminRole;
          return newPermission;
        });
      await this.permissionRepository.save(newPermissions);
      console.log('‚úÖ T·∫•t c·∫£ permission ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g√°n v√†o role Admin');
    }

    // 3Ô∏è‚É£ Ki·ªÉm tra xem user admin c√≥ t·ªìn t·∫°i kh√¥ng
    let adminUser = await this.userRepository.findOne({
      where: { gmail: 'admin@gmail.com' },
      relations: ['roles'],
    });

    if (!adminUser) {
      adminUser = this.userRepository.create({
        name: 'Admin',
        gmail: 'admin@gmail.com',
        password: '123456',
        roles: [adminRole], // G√°n role Admin cho user n√†y
      });

      await this.userRepository.save(adminUser);
      console.log('‚úÖ User Admin ƒë√£ ƒë∆∞·ª£c t·∫°o');
    } else {
      // N·∫øu user ƒë√£ c√≥ nh∆∞ng ch∆∞a c√≥ role Admin, th√™m v√†o
      if (!adminUser.roles.some((role) => role.id === adminRole.id)) {
        adminUser.roles.push(adminRole);
        await this.userRepository.save(adminUser);
        console.log('‚úÖ User Admin ƒë√£ ƒë∆∞·ª£c g√°n th√™m role Admin');
      }
    }

    console.log('üéâ Seed d·ªØ li·ªáu ho√†n t·∫•t!');
  }
}
